swagger: '2.0'
info:
  title: Movies Application API
  version: 1.0.0
  description: >
    ## API of Movies Application


    This specification describes the endpoints, request/response model for Movie Application.
    This API provides REST resources to manage  movies of Movies application.


    The resources should only be used over HTTPS (SSL) and can be accessed via the following base URL:


    ```
      http://localhost:8080/api/v1/
    ```


    ## API usage guidelines


    This section describes general rules and guidelines for using REST based
    services offered by Movies Application.

      * All resources can only be accessed via HTTPS and a respective HTTP Basic Authentication header is also required.
      * Movies Application reserves the right to add new parameters without further notice (in request and response).
      * Movies Application reserves the right to add new error codes without further notice. Movies Application will thereby stick to the HTTP STATUS CODES as defined by W3C.
      * Movies Application reserves the right to enhance enumerations by new values.
      * Movies Application reserves the right to increase the "maxItem" settings of arrays without further notice.

    Each consumer needs to tolerant about changes to the API as much as possible ([see Tolerant Reader Pattern](http://martinfowler.com/bliki/TolerantReader.html))


    ## Business definitions

    Movie APIs are called by an authorized application to view data on movies, artists, theatres, shows and bookings.

    ## Release Notes

    ### 1.0.0

    * Initial version

host: localhost:8080
schemes:
  - http
  - https
basePath: /api/v1
tags:
  - name: 'API#005 Movies'
    description: >-
      All operations marked with 'API#005 Movies' are relevant to movie management use case

paths:
  /movies:
    get:
       operationId: getMovies
       tags:
         - 'API#005 Movies'
       summary: Movie Application - Get all Movies
       description: >
         API to get all movies of Movies application
       produces:
         - application/json
       parameters:
         - in: query
           name: page
           type: integer
           required: false
           description: query to set the position of the records to be fetched from
         - in: query
           name: limit
           type: integer
           required: false
           description: query to limit the number of records per fetch
         - in: query
           name: status
           type: string
           enum: [PUBLISHED, RELEASED, DELETED]
           required: false
           description: query to filter the results based on specified status(es) (comma separated)
         - in: query
           name: start_date
           type: string
           required: false
           description: query to filter the movies whose release date is equal or after the specified start date (e.g. 2018-07-01)
         - in: query
           name: end_date
           type: string
           required: false
           description: query to filter the movies whose release date is equal or before the specified start date (e.g. 2018-07-30)
         - in: query
           name: artist_name
           type: string
           required: false
           description: query to filter the results based on specified artist name
         - in: query
           name: genre
           type: string
           required: false
           description: query to filter the movies based on specified genre(s) (comma separated)
         - in: query
           name: min_rating
           type: number
           format: float
           required: false
           description: query to filter the movies whose rating is greater than or equal to the specified value (e.g. 3.0)
         - in: query
           name: max_rating
           type: number
           format: float
           required: false
           description: query to filter the movies whose rating is lesser than or equal to the specified value (e.g. 5.0)
         - in: query
           name: sortBy
           type: string
           enum: [RATING, RELEASE_DATE]
           required: false
           description: query to sort the results based on specified key(s)
       responses:
         '200':
           description: OK - Fetched all movies
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
           schema:
             $ref: '#/definitions/MoviesSummaryResponse'
         '400':
            description: >-
              BAD REQUEST - server cannot or will not process the request due to something that is perceived to be a
              client error (e.g., malformed request syntax, mandatory elements are missing)
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend
         '401':
            description: UNAUTHORIZED - user has provided wrong credentials
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend
         '403':
            description: >-
              FORBIDDEN - request has not been applied because client application has no permission to perform action
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend
         '422':
            description: >-
              UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend
            schema:
              $ref: '#/definitions/ErrorResponse'
         '500':
            description: >-
              INTERNAL SERVER ERROR - server encountered an unexpected condition that prevented it from fulfilling the request.
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend

  /movies/{movie_id}:
     get:
        operationId: getMovie
        tags:
          - 'API#005 Movies'
        summary: Movie Management - Get an existing Movie
        description: >
            API to get an existing Movie detalis of Movies application
        produces:
          - application/json
        parameters:
          - $ref: '#/parameters/MovieId'
        responses:
         '200':
           description: OK - Fetched movie details
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
           schema:
             $ref: '#/definitions/MovieSummaryType'
         '400':
           description: >-
             BAD REQUEST - server cannot or will not process the request due to
             something that is perceived to be a client error (e.g., malformed
             request syntax, mandatory elements are missing)
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '401':
           description: UNAUTHORIZED - user has provided wrong credentials
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '403':
           description: >-
             FORBIDDEN - request has not been applied because client application
             has no permission to perform action
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '404':
           description: >-
             NOT FOUND - Movie (resource) does not exist
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '500':
           description: >-
             INTERNAL SERVER ERROR - server encountered an unexpected condition
             that prevented it from fulfilling the request.
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend

  /movies/{movie_id}/artists:

    get:
      operationId: getMovieArtists
      tags:
        - 'API#005 Movies'
      summary: Movie Management - List of artists belonging to the Movie
      description: >
          API to get an existing artists of the Movie
      produces:
        - application/json
      parameters:
       - $ref: '#/parameters/MovieId'
      responses:
       '200':
         description: OK - Fetched list of Movie artists
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
         schema:
           $ref: '#/definitions/ArtistsSummaryResponse'
       '400':
         description: >-
           BAD REQUEST - server cannot or will not process the request due to
           something that is perceived to be a client error (e.g., malformed
           request syntax, mandatory elements are missing)
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '401':
         description: UNAUTHORIZED - user has provided wrong credentials
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '403':
         description: >-
           FORBIDDEN - request has not been applied because client application
           has no permission to perform action
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '500':
         description: >-
           INTERNAL SERVER ERROR - server encountered an unexpected condition
           that prevented it from fulfilling the request.
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend

  /movies/{movie_id}/artists/{artist_id}:
     get:
        operationId: getMovieArtistDetails
        tags:
          - 'API#005 Movies'
        summary: Movie Management - Get an existing details of the Movie
        description: >
            API to get an existing details of the Movie
        produces:
          - application/json
        parameters:
          - $ref: '#/parameters/MovieId'
          - $ref: '#/parameters/ArtistId'
        responses:
         '200':
           description: OK - Fetched artist details
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
           schema:
             $ref: '#/definitions/ArtistType'
         '400':
           description: >-
             BAD REQUEST - server cannot or will not process the request due to
             something that is perceived to be a client error (e.g., malformed
             request syntax, mandatory elements are missing)
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '401':
           description: UNAUTHORIZED - user has provided wrong credentials
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '403':
           description: >-
             FORBIDDEN - request has not been applied because client application
             has no permission to perform action
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '404':
           description: >-
             NOT FOUND - Artist (resource) does not exist
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '500':
           description: >-
             INTERNAL SERVER ERROR - server encountered an unexpected condition
             that prevented it from fulfilling the request.
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend

  /movies/{movie_id}/shows:

    get:
      operationId: getMovieShows
      tags:
        - 'API#005 Movies'
      summary: Movie Application - List of shows belonging to the Movie
      description: >
          API to get an existing shows of the Movie
      produces:
        - application/json
      parameters:
         - $ref: '#/parameters/MovieId'
         - $ref: '#/parameters/Authorization'
         - in: query
           name: page
           type: integer
           required: false
           description: query to set the position of the records to be fetched from
         - in: query
           name: limit
           type: integer
           required: false
           description: query to limit the number of records per fetch
         - in: query
           name: title
           type: string
           required: false
           description: query to filter the results based on specified movie title
         - in: query
           name: genre
           type: string
           required: false
           description: query to filter the movies based on specified genre(s) (comma separated)
         - in: query
           name: ticket_availability
           type: integer
           required: false
           description: query to filter the movies based on the specified number of ticket availability
         - in: query
           name: city_code
           type: string
           required: false
           description: query to filter the results based on specified city code
         - in: query
           name: language
           type: string
           required: false
           description: query to filter the results based on specified language
         - in: query
           name: start_time
           type: string
           required: false
           description: query to filter the shows whose show timing is equal or after the specified start date time (e.g. 2018-07-01 11:30)
         - in: query
           name: end_time
           type: string
           required: false
           description: query to filter the shows whose show timing is equal or before the specified start date time (e.g. 2018-07-01 15:30)
         - in: query
           name: min_price
           type: number
           format: double
           required: false
           description: query to filter the shows whose unit price is greater than or equal to the specified value (e.g. 100.00)
         - in: query
           name: max_price
           type: number
           format: double
           required: false
           description: query to filter the shows whose unit price is lesser than or equal to the specified value (e.g. 300.00)
      responses:
       '200':
         description: OK - fetched list of movie shows
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
         schema:
           $ref: '#/definitions/MovieShowsSummaryResponse'
       '400':
         description: >-
           BAD REQUEST - server cannot or will not process the request due to
           something that is perceived to be a client error (e.g., malformed
           request syntax, mandatory elements are missing)
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '401':
         description: UNAUTHORIZED - user has provided wrong credentials
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '403':
         description: >-
           FORBIDDEN - request has not been applied because client application
           has no permission to perform action
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '500':
         description: >-
           INTERNAL SERVER ERROR - server encountered an unexpected condition
           that prevented it from fulfilling the request.
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend

  /movies/{movie_id}/shows/{show_id}:

     get:
        operationId: getShowDetails
        tags:
          - 'API#005 Movies'
        summary: Movie Application - Get an existing show details
        description: >
            API to get an existing show details of Movies application
        produces:
          - application/json
        parameters:
          - $ref: '#/parameters/MovieId'
          - $ref: '#/parameters/ShowId'
          - $ref: '#/parameters/Authorization'
        responses:
         '200':
           description: OK - fetched show details
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
           schema:
             $ref: '#/definitions/MovieShowType'
         '400':
           description: >-
             BAD REQUEST - server cannot or will not process the request due to
             something that is perceived to be a client error (e.g., malformed
             request syntax, mandatory elements are missing)
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '401':
           description: UNAUTHORIZED - user has provided wrong credentials
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '403':
           description: >-
             FORBIDDEN - request has not been applied because client application
             has no permission to perform action
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '404':
           description: >-
             NOT FOUND - Show (resource) does not exist
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '500':
           description: >-
             INTERNAL SERVER ERROR - server encountered an unexpected condition
             that prevented it from fulfilling the request.
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend

  /coupons:

    get:
      operationId: getCoupons
      tags:
        - 'API#005 Movies'
      security:
        - Authorization: []
      summary: Movie Application - List of coupons available
      description: >
          API to get an existing coupons available in the database
      produces:
        - application/json
      parameters:
         - $ref: '#/parameters/Authorization'
         - in: query
           name: page
           type: integer
           required: false
           description: query to set the position of the records to be fetched from
         - in: query
           name: limit
           type: integer
           required: false
           description: query to limit the number of records per fetch
      responses:
       '200':
         description: OK - fetched list of coupons
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
         schema:
           $ref: '#/definitions/CouponsSummaryResponse'
       '400':
         description: >-
           BAD REQUEST - server cannot or will not process the request due to
           something that is perceived to be a client error (e.g., malformed
           request syntax, mandatory elements are missing)
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '401':
         description: UNAUTHORIZED - user has provided wrong credentials
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '403':
         description: >-
           FORBIDDEN - request has not been applied because client application
           has no permission to perform action
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '500':
         description: >-
           INTERNAL SERVER ERROR - server encountered an unexpected condition
           that prevented it from fulfilling the request.
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend

  /bookings:

    post:
      operationId: bookShow
      tags:
        - 'API#005 Movies'
      security:
        - Authorization: []
      summary: Movie Application - Book the show
      description: >
        API to book the show
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/Authorization'
        - in: body
          name: ShowBookingRequest
          description: Request containing booking details
          required: true
          schema:
            $ref: '#/definitions/BookingRequest'
      responses:
        '201':
          description: CREATED - Show has been booked successfully by the customer
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend
            location:
              type: string
              description: Location of the new resource which was created by this request
          schema:
            $ref: '#/definitions/BookingType'
        '400':
          description: >-
            BAD REQUEST - server cannot or will not process the request due to
            something that is perceived to be a client error (e.g., malformed
            request syntax, mandatory elements are missing)
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend
        '401':
          description: UNAUTHORIZED - user has provided wrong credentials
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend
        '403':
          description: >-
            FORBIDDEN - request has not been applied because client application
            has no permission to perform action
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend
        '422':
          description: >-
            UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: >-
            INTERNAL SERVER ERROR - server encountered an unexpected condition
            that prevented it from fulfilling the request.
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend

    get:
      operationId: getBookings
      tags:
        - 'API#005 Movies'
      security:
        - Authorization: []
      summary: Movie Application - List of bookings belonging to the Customer
      description: >
          API to get an existing bookings of the Customer
      produces:
        - application/json
      parameters:
         - $ref: '#/parameters/Authorization'
         - in: query
           name: page
           type: integer
           required: false
           description: query to set the position of the records to be fetched from
         - in: query
           name: limit
           type: integer
           required: false
           description: query to limit the number of records per fetch
         - in: query
           name: status
           type: string
           enum: [CONFIRMED,CANCELLED]
           required: false
           description: query to filter the results based on specified status
      responses:
       '200':
         description: OK - fetched list of bookings
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
         schema:
           $ref: '#/definitions/BookingsSummaryResponse'
       '400':
         description: >-
           BAD REQUEST - server cannot or will not process the request due to
           something that is perceived to be a client error (e.g., malformed
           request syntax, mandatory elements are missing)
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '401':
         description: UNAUTHORIZED - user has provided wrong credentials
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '403':
         description: >-
           FORBIDDEN - request has not been applied because client application
           has no permission to perform action
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend
       '500':
         description: >-
           INTERNAL SERVER ERROR - server encountered an unexpected condition
           that prevented it from fulfilling the request.
         headers:
           request-id:
             type: string
             description: Used as correlation id while tracing for the request in the backend

  /bookings/{booking_id}:

     get:
        operationId: getBookingDetails
        tags:
          - 'API#005 Movies'
        summary: Movie Application - Get an existing booking details
        description: >
            API to get an existing booking details of Movies application
        produces:
          - application/json
        parameters:
          - $ref: '#/parameters/BookingId'
          - $ref: '#/parameters/Authorization'
        responses:
         '200':
           description: OK - fetched booking details
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
           schema:
             $ref: '#/definitions/BookingType'
         '400':
           description: >-
             BAD REQUEST - server cannot or will not process the request due to
             something that is perceived to be a client error (e.g., malformed
             request syntax, mandatory elements are missing)
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '401':
           description: UNAUTHORIZED - user has provided wrong credentials
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '403':
           description: >-
             FORBIDDEN - request has not been applied because client application
             has no permission to perform action
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '404':
           description: >-
             NOT FOUND - Booking (resource) does not exist
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend
         '500':
           description: >-
             INTERNAL SERVER ERROR - server encountered an unexpected condition
             that prevented it from fulfilling the request.
           headers:
             request-id:
               type: string
               description: Used as correlation id while tracing for the request in the backend

     delete:
        operationId: cancelBooking
        tags:
          - 'API#005 Movies'
        security:
          - Authorization: []
        summary: Movie Application - Mark an existing Booking as CANCELLED
        description: >
            API to cancel an existing Booking
        parameters:
          - $ref: '#/parameters/BookingId'
          - $ref: '#/parameters/Authorization'
        responses:
          '200':
            description: OK - Booking status has been set to CANCELLED
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend
          '400':
            description: >-
              BAD REQUEST - server cannot or will not process the request due to
              something that is perceived to be a client error (e.g., malformed
              request syntax, mandatory elements are missing)
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend
          '401':
            description: UNAUTHORIZED - user has provided wrong credentials
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend
          '403':
            description: >-
              FORBIDDEN - request has not been applied because client application
              has no permission to perform action
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend
          '404':
            description: >-
              NOT FOUND - Booking (resource) does not exist
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend
          '500':
            description: >-
              INTERNAL SERVER ERROR - server encountered an unexpected condition
              that prevented it from fulfilling the request.
            headers:
              request-id:
                type: string
                description: Used as correlation id while tracing for the request in the backend

parameters:
  Authorization:
    name: authorization
    type: string
    in: header
    required: true
    description: >-
      Mandatory user credentials in bearer http authentication scheme format. Refer to the #/securityDefinitions
      for more information on this header.
  MovieId:
    name: movie_id
    type: string
    format: uuid
    in: path
    required: true
    description: >-
      Unique identifier of Movie in a standard UUID format
  ArtistId:
    name: artist_id
    type: string
    format: uuid
    in: path
    required: true
    description: >-
      Unique identifier of an Artist in a standard UUID format
  ShowId:
    name: show_id
    type: string
    format: uuid
    in: path
    required: true
    description: >-
      Unique identifier of a Show in a standard UUID format
  BookingId:
    name: booking_id
    type: string
    format: uuid
    in: path
    required: true
    description: >-
      Unique identifier of a Booking in a standard UUID format

definitions:

  MoviesSummaryResponse:
    type: object
    properties:
      page:
        type: integer
        description: page or position of the fetched movies
      limit:
        type: integer
        description: number of movies fetched per this request
      total_count:
        type: integer
        description: total number of movies in the database
      movies:
        type: array
        items:
          type: object
          $ref: '#/definitions/MovieSummaryType'
        description: List of movies
    required:
      - page
      - limit
      - total_count
      - movies
    example:
      page: 1
      limit: 10
      total_count: 33
      movies:
        - id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
          title: Sample Movie
          storyline: This is a sample movie
          genres:
            - Drama
            - Romantic
          duration: 120
          poster_url: www.samplemovie.com/poster
          trailer_url: www.samplemovie.com/trailer
          wiki_url: www.wikipedia.com/samplemovie
          release_date: 2018-07-07
          censor_board_rating: U
          rating: 4.0
          status: RELEASED

        - id: 8d174a25-da31-55a8-85b4-c06ffc9d5f8f
          title: Another Sample Movie
          storyline: This is another sample movie
          genres:
            - Comedy
          duration: 160
          poster_url: www.anothersamplemovie.com/poster
          trailer_url: www.anothersamplemovie.com/trailer
          wiki_url: www.wikipedia.com/anothersamplemovie
          release_date: 2018-08-07
          censor_board_rating: U
          rating: 3.0
          status: PUBLISHED

  MovieSummaryType:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: Unique identifier of the movie in a standard UUID format
      title:
        type: string
        description: Title of the movie
      storyline:
        type: string
        description: Storyline of the movie
      genres:
        type: array
        items:
          type: string
        description: Genres of the movie
      duration:
        type: integer
        description: Duration (in minutes) of the movie
      poster_url:
        type: string
        description: Poster URL of the movie
      trailer_url:
        type: string
        description: Trailer URL of the movie
      wiki_url:
        type: string
        description: Wiki URL of the movie
      release_date:
        description: Release date of the movie
        $ref: '#/definitions/FullDateType'
      censor_board_rating:
        $ref: '#/definitions/CensorBoardRatingType'
      rating:
        type: number
        format: float
        description: Rating of the movie
      status:
        $ref: '#/definitions/MovieStatusType'
      artists:
        type: array
        items:
          type: object
          $ref: '#/definitions/ArtistType'
        description: List of artists
    required:
      - title
      - storyline
      - genres
      - duration
      - poster_url
      - trailer_url
      - release_date
      - censor_board_rating
      - rating
      - status
    example:
      title: Sample Movie
      storyline: This is a sample movie
      genres:
        - Drama
        - Romantic
      duration: 120
      poster_url: www.samplemovie.com/poster
      trailer_url: www.samplemovie.com/trailer
      wiki_url: www.wikipedia.com/samplemovie
      release_date: 2018-07-07
      censor_board_rating: U
      rating: 4.0
      status: RELEASED

  ArtistType:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: Unique identifier of the movie artists in a standard UUID format generated by API backend
      first_name:
        type: string
        description: First name of an artist
      last_name:
        type: string
        description: Last name of an artist
      role_type:
        type: string
        description: Role of an artist
        $ref: '#/definitions/ArtistRoleType'
      profile_description:
        type: string
        description: Profile description of an artist
      profile_url:
        type: string
        description: Profile URL of an artist
      wiki_url:
        type: string
        description: Wikipedia URL of an artist

  ArtistsSummaryResponse:
    type: object
    properties:
      page:
        type: integer
        description: page or position of the fetched artists
      limit:
        type: integer
        description: number of artists fetched per this request
      total_count:
        type: integer
        description: total number of artists in the movie
      artists:
        type: array
        items:
          type: object
          $ref: '#/definitions/ArtistType'
        description: List of artists
    required:
      - total_count
      - artists
    example:
      total_count: 8
      artists:
        - id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
          first_name: Movie
          last_name: Director
          role_rype: DIRECTOR
          profile_description: Director of the movie
          profile_url: www.artistsprofile.com/director
          wiki_url: www.wikipedia.com/director

  MovieShowsSummaryResponse:
    type: object
    properties:
      page:
        type: integer
        description: page or position of the fetched shows
      limit:
        type: integer
        description: number of shows fetched per this request
      total_count:
        type: integer
        description: total number of shows in the movie
      shows:
        type: array
        items:
          type: object
          $ref: '#/definitions/MovieShowType'
        description: List of shows
    required:
      - total_count
      - shows
    example:
      total_count: 8
      shows:
        - id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
          theatre:
            id: b66c889c-927f-48bc-b130-06d5e5abaa1d
            name: Inox Cinemas
            postal_address: Garuda Mall, Koramangala
            city_code: BLR
            city: Bengaluru
            status: ACTIVE
          show_timing: 2018-08-21T14:30
          language: ENGLISH
          unit_price: 200.00
          total_seats: 125
          available_seats: 75
        - id: 8d174a25-ba31-45a8-85b4-b06ffc9d5f89
          theatre:
            id: 48076d24-bffa-4e51-bd91-e125e03671e3
            name: PVR Cinemas
            postal_address: Forum Mall, Koramangala
            city_code: BLR
            city: Bengaluru
            status: ACTIVE
          show_timing: 2018-08-21T16:20
          language: ENGLISH
          unit_price: 250.00
          total_seats: 150
          available_seats: 5

  MovieShowType:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: Unique identifier of the show in a standard UUID format
      theatre:
        type: object
        $ref: '#/definitions/TheatreSummaryType'
      show_timing:
        $ref: '#/definitions/FullDateTimeType'
        description: Show timing in yyyy-MM-ddTHH:MM format
      language:
        $ref: '#/definitions/LanguageType'
      unit_price:
        $ref: '#/definitions/UnitPriceType'
      total_seats:
        type: integer
        description: Total number that this show can host
      available_seats:
        type: integer
        description: Total available seats that this show still has
      status:
        $ref: '#/definitions/MovieShowStatusType'

  TheatreSummaryType:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: Unique identifier of the theatre in a standard UUID format
      name:
        type: string
        description: Name of the theatre
      postal_address:
        type: string
        description: Postal address of the theatre
      city_code:
        type: string
        description: City code of the theatre
      city:
        type: string
        description: City of the theatre
      status:
        $ref: '#/definitions/TheatreStatusType'
    required:
      - id
      - name
      - postal_address
      - city_code
      - city
      - status
    example:
      id: 8d174a25-da31-55a8-85b4-c06ffc9d5f8f
      name: Sample Theatre
      postal_address: Sample Theatre Address
      city_code: BLR
      city: Bengaluru
      status: ACTIVE

  CouponsSummaryResponse:
    type: object
    properties:
      total_count:
        type: integer
        description: total number of coupons
      coupons:
        type: array
        items:
          type: object
          $ref: '#/definitions/CouponType'
        description: List of coupons
    required:
      - total_count
      - coupons
    example:
      total_count: 8
      coupons:
        - code: abc123
          value: 10
          description: 10% discount
        - code: xyz123
          value: 12
          description: 12% discount

  CouponType:
    type: object
    properties:
      code:
        type: string
        description: Coupon code
      value:
        type: integer
        description: Value of coupon
      description:
        type: string
        description: Description of the coupon

  BookingsSummaryResponse:
    type: object
    properties:
      page:
        type: integer
        description: page or position of the fetched bookings
      limit:
        type: integer
        description: number of bookings fetched per this request
      total_count:
        type: integer
        description: total number of bookings
      bookings:
        type: array
        items:
          type: object
          $ref: '#/definitions/BookingType'
        description: List of bookins
    required:
      - total_count
      - bookins
    example:
      total_count: 8
      bookings:
        - id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
          reference_number: abc123
          movie_title: Some movie title
          show_timing: 2018-08-21 14:30
          language: ENGLISH
          theatre:
            id: b66c889c-927f-48bc-b130-06d5e5abaa1d
            name: Inox Cinemas
            postal_address: Garuda Mall, Koramangala
            city_code: BLR
            city: Bengaluru
            status: ACTIVE
          total_tickets: 2
          total_price: 500.00
          tickets:
            - J12
            - J13
          status: CONFIRMED
        - id: 8d174a25-ba31-45a8-85b4-b06ffc9d5f89
          reference_number: abc123
          movie_title: Some movie title
          show_timing: 2017-05-13 14:30
          language: ENGLISH
          theatre:
            id: b66c889c-927f-48bc-b130-06d5e5abaa1d
            name: Inox Cinemas
            postal_address: Garuda Mall, Koramangala
            city_code: BLR
            city: Bengaluru
            status: ACTIVE
          total_tickets: 2
          total_price: 500.00
          tickets:
            - A2
            - A3
          status: CANCELLED

  BookingRequest:
    type: object
    properties:
      show_id:
        type: string
        format: uuid
        description: Unique identifier of the show in a standard UUID format
      coupon_code:
        type: string
        description: Coupon code applied while booking
      tickets:
        type: array
        items:
          type: string
        description: Selected ticket numbers for the show

    required:
      - show_id
      - tickets
    example:
      show_id: b66c889c-927f-48bc-b130-06d5e5abaa1d
      coupon_code: abc123
      tickets:
        - J12
        - J13

  BookingType:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: Unique identifier of the booking in a standard UUID format
      reference_number:
        type: string
        description: Booking reference number
      movie_title:
        type: string
        description: Movie title
      coupon_code:
        type: string
        description: Coupon code
      show_timing:
        $ref: '#/definitions/FullDateTimeType'
      language:
        type: string
        description: Language of the movie
      theatre:
        $ref: '#/definitions/TheatreSummaryType'
      total_tickets:
        type: integer
        description: Total number of tickets booked
      total_price:
        $ref: '#/definitions/UnitPriceType'
      tickets:
        type: array
        items:
          type: string
        description: Selected ticket numbers for the show
      booked_by:
        $ref: '#/definitions/BookingCustomerInfoType'
      status:
        $ref: '#/definitions/BookingStatusType'

    required:
      - reference_number
      - movie_title
      - language
      - show_timing
      - theatre
      - total_price
      - total_tickets
      - tickets

  BookingCustomerInfoType:
    type: object
    properties:
      first_name:
        type: string
        description: First name of the new user
      last_name:
        type: string
        description: Last name of the new user
      email_address:
        type: string
        description: Email address of the new user
      mobile_number:
        type: string
        description: Mobile number of the new user

  TheatreSummaryType:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: Unique identifier of the theatre in a standard UUID format
      name:
        type: string
        description: Name of the theatre
      postal_address:
        type: string
        description: Postal address of the theatre
      city_code:
        type: string
        description: City code of the theatre
      city:
        type: string
        description: City of the theatre
      status:
        $ref: '#/definitions/TheatreStatusType'

  FullDateTimeType:
    type: string
    format: date-time
    description: Full date-time format (yyyy-MM-dd HH:mm)

  FullDateType:
    type: string
    format: full-date
    description: Full date format

  MovieStatusType:
    type: string
    enum: [PUBLISHED, RELEASED, DELETED]
    description: Status of the movie

  TheatreStatusType:
    type: string
    enum: [ACTIVE,INACTIVE]
    description: Status of the theatre

  ArtistRoleType:
    type: string
    enum: [DIRECTOR, PRODUCER, ACTOR, CINEMATOGRAPHER, MUSICIAN, STUNTMAN]
    description: Status of the task

  ArtistStatusType:
    type: string
    enum: [ACTIVE, INACTIVE]
    description: Status of an artist

  CensorBoardRatingType:
    type: string
    enum: [U,A,UA]
    description: Censor board rating

  MovieShowStatusType:
    type: string
    enum: [ACTIVE,INACTIVE]
    description: Status of the show

  LanguageType:
    type: string
    enum: [ENGLISH,HINDI,KANNADA,MARATHI,TELUGU,TAMIL,MALAYALAM,BENGALI,PUNJABI]
    description: Language of the movie to be mapped to this show

  UnitPriceType:
    type: number
    format: double
    description: Unit price of the movie (for e.g. 200.00)

  BookingStatusType:
    type: string
    enum: [CONFIRMED,CANCELLED]
    description: Status of the booking

  ErrorResponse:
    type: object
    properties:
      code:
        type: string
        description: Application specific standard error code
      message:
        type: string
        description: Error message stating the reason
      root_cause:
        type: string
        description: Root cause of the Error
    required:
      - code
      - message
    example:
      code: MVI-001
      message: Movie with identifier does not exist