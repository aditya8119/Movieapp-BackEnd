swagger: '2.0'
info:
  title: Customer Registration API
  version: 1.0.0
  description: >
    ## API of User Signup Service


    This specification describes the endpoints, request/response model of the
    User Signup API. This API provides REST resources to register customers in Movies Application.


    The resources should only be used over HTTPS (SSL) and can be accessed via the following base URL:


    ```
      https://localhost:8080/api/v1/
    ```


    ## API usage guidelines


    This section describes general rules and guidelines for using REST based
    services offered by Movies.

      * All resources can only be accessed via HTTPS and a respective HTTP Basic Authentication header is also required.
      * Movies Application reserves the right to add new parameters without further notice (in request and response).
      * Movies Application reserves the right to add new error codes without further notice. Movies Application will thereby stick to the HTTP STATUS CODES as defined by W3C.
      * Movies Application reserves the right to enhance enumerations by new values.
      * Movies Application reserves the right to increase the "maxItem" settings of arrays without further notice.
      
    Each consumer needs to tolerant about changes to the API as much as possible ([see Tolerant Reader Pattern](http://martinfowler.com/bliki/TolerantReader.html))


    ## Business definitions

    A customer who is trying to register should provide the required inputs including email address in order to be registered successfully in Movies application.
    After the signup, customer will remain in REGISTERED status and cannot access Movies application. Once approved by an administrator, customer will turn to
    ACTIVE status and can start accessing Movies application.


    ### Note: Movies application supports HTTPS only scheme. All requests are sent in a secured and encrypted manner and hence the password
    is never sent in a text/plain format.

    ### Password Policy:

      * Minimum of 8 character length

      * Should contain alphabets with at least one special character and one number

      * Allowed special characters are # $ @ _ - !

    ## Release Notes 

    ### 1.0.0

    * Initial version

host: localhost:8080
schemes:
  - http
  - https
basePath: /api/v1
tags:
  - name: 'API#002 Signup'
    description: >-
      All operations marked with 'API#002 Signup' are relevant to user signup use case
paths:
  /signup:
    x-swagger-router-controller: api
    post:
      tags:
        - 'API#002 Signup'
      operationId: signupUser
      summary: Signup User
      description: >
        Each user who needs access to Movies application should signup using their valid email address and
        set a password for an authorized access.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: SignupUserRequest
          description: Request containing user signup information
          required: true
          schema:
           $ref: '#/definitions/SignupUserRequest'
      responses:
        '201':
          description: CREATED - User has been signuped successfully
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend
            location:
              type: string
              description: Location of the new resource which was created by this request
          schema:
            $ref: '#/definitions/SignupUserResponse'
        '400':
          description: >-
            BAD REQUEST - server cannot or will not process the request due to
            something that is perceived to be a client error (e.g., malformed
            request syntax, mandatory elements are missing)
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend
        '401':
          description: UNAUTHORIZED - user has provided wrong credentials
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend
        '403':
          description: >-
            FORBIDDEN - request has not been applied because client application
            has no permission to perform action
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend
        '422':
          description: >-
            UNPROCESSABLE ENTITY - request was well-formed but server unable to process due to semantic errors
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request flow to the backend
        '500':
          description: >-
            INTERNAL SERVER ERROR - server encountered an unexpected condition
            that prevented it from fulfilling the request.
          headers:
            request-id:
              type: string
              description: Used as correlation id while tracing for the request in the backend

definitions:
  SignupUserRequest:
    type: object
    properties:
      first_name:
        type: string
        description: First name of the new user
      last_name:
        type: string
        description: Last name of the new user
      email_address:
        type: string
        description: Email address of the new user
      password:
        type: string
        description: Password of the new user
        format: password
        x-obfuscated: true
      mobile_number:
        type: string
        description: Mobile number of the new user
    required:
      - first_name
      - last_name
      - email_address
      - password
      - mobile_number
    example:
      first_name: Movies
      last_name: Administrator
      email_address: movies.admin@movieapp.com
      password: m0v1e@dm1nu$er
      mobile_number: +91 1234567890

  SignupUserResponse:
    type: object
    properties:
      id:
        type: string
        description: User identifier in a standard UUID format generated by API backend
      status:
        $ref: '#/definitions/UserStatusType'
    required:
      - id
      - status
    example:
      id: 7d174a25-ba31-45a8-85b4-b06ffc9d5f8f
      status: REGISTERED

  UserStatusType:
    type: string
    enum: [REGISTERED, ACTIVE, INACTIVE, LOCKED]
    description: Status of the User

  ErrorResponse:
    type: object
    properties:
      code:
        type: string
        description: Application specific standard error code
      message:
        type: string
        description: Error message stating the reason
      root_cause:
        type: string
        description: Root cause of the Error
    required:
      - code
      - message
    example:
      code: USR-009
      message: User with email address [abc@xyz.com] already exist